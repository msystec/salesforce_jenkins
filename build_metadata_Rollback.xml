<?xml version="1.0" encoding="UTF-8"?>

<!-- ################################################################################################### 
 @author   Persistent Systems 
 @date     3-28-2017
 @description  - This file contain all the tasks/targets needed for the supported salesforce metadata 
				 migration to the target org. It has the logic to get the salesforce session id of the
				 target org, response parsing, builddetails object record creation, runquery, incremental
				 deployment, full deployment etc.
				 
				 Any metadata related changes needed need to be carried out in this file.
				  
#########################################################################################################
-->

<project name="metadata" basedir="." xmlns:sf="antlib:com.salesforce">
    
    <!-- <property file="../build.properties"/> -->
   <!-- <property file="default.properties"/> -->
    <!-- <property  file="${property.file.path}"/> -->
	<property environment="env"/>
    
  
    <!-- Define salesforce migration tool task  -->
    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="CISupport/lib/ant-salesforce.jar" />
        </classpath>
    </taskdef>

	<taskdef resource="net/sf/antcontrib/antlib.xml" 
              classpath="CISupport/lib/ant-contrib-1.0b3.jar"/>
    
    <!-- Define ant contib task to have complex logic like if else and for loop etc. -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" 
              classpath="${ant.contrib.jar}" />
	
    <path id="Encodebase64.path">
        <pathelement location="${ant.java.commons-codec.jar}"/>
        <pathelement location="${ant.git.salesforce.incremental.jar}"/>
    </path>
    <!-- Define ant http task to make http get and post to salesforce for data -->  
	<taskdef name="http" 
             classname="org.missinglink.ant.task.http.HttpClientTask" classpath="${ant.http.jar}"/> 
    
    
    <!-- Define xmltask to parse xml and add node to xml etc. -->
    <taskdef name="xmltask" 
             classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="${ant.xmltask.jar}"/>
  
    <!-- Define custom copyfiles task to prepare deployment folder from git using package xml-->
    <taskdef name="copyfiles" 
             classname="CopyFilesUsingPackageXML" classpath="${ant.git.salesforce.incremental.jar}"/>
    
    <!-- Define custom EncodeBase64 task to convert zip back up to base64 so that it can be post to SF -->
    <taskdef name="EncodeBased64" classpathref="Encodebase64.path"
             classname="EncodeBased64Binary"  />	
	
	<!-- Define custom cleanpermission task for cleaning profiles/permissionsets not included in the src -->
	    <taskdef name="cleanPermissions" 
	             classname="PreparePermissions" classpath="${ant.git.salesforce.incremental.jar}"/>
			 
    <!-- this macrodef will create a build record in salesforce with updated revision id -->   
    <macrodef name="createBuildRecord" description="Builddetails object record creation">
       
        <attribute name="sessionId" description="Salesforce sessionId."/>
        <attribute name="startrev" description="Git startrevision number"/>
        <attribute name="endrev" description="Git endrevision number"/>
        <attribute name="buildrecordId" description="Builddetails recordId"/>  
        <attribute name="gitlogcomment" default="Full Deployment"/>
		<attribute name="BuildType" default="Build Type"/>
		
		<attribute name="backupfilepath" description="Backup.zip file path location"/>
		
        <sequential>
			<echo>***************** Create Build started *******************</echo>
			<exec executable="cmd" resultproperty="SFDX.recordResponseStatus" outputproperty="SFDX.createrecord.output" failonerror="true">
				<arg line='/c '/>
				<arg line=' sfdx force:data:record:create -s BuildDetails__c -u ${sfsb.username} '/>
				<arg line=' -v '/>
				<arg line=' "RevisionStart__c=@{startrev} RevisionEnd__c=@{endrev}  Description__c=NA BuildType__c=@{BuildType}" '/>
				<!-- <arg line=" Description__c='NA' BuildType__c='@{BuildType}' "/> -->
				<arg line=' --json'/>
		   </exec>

            <if>
                <!-- Success? -->
                <equals arg1="${SFDX.recordResponseStatus}" arg2="0"/>
                <then>
                    <!-- Parse JSON response and set properites -->
					<script language="javascript">
								<!-- var response = eval('('+project.getProperty('buildDetails')+')'); -->
								var echo = project.createTask("echo");
								var response = project.getProperty('SFDX.createrecord.output');
								var jsonformatted = JSON.parse(response);
								var result = jsonformatted.result;
							echo.setMessage("Build Record Id is  " +  result.id);
							echo.perform( );
								
								if(result){
									project.setProperty('start.revision', result.id);
									project.setProperty('@{buildrecordId}' ,  result.id);
								}else{
								}
							</script>
                   
                    <echo>${line.separator} *** Build Record is Created *** </echo>     
		
					 <if>
                        <available file="@{backupfilepath}"/>
                        <then>
                            <EncodeBased64 srcPatch="@{backupfilepath}" retproperty="base64EncodedValue"/> 
                    
                            <createAttachment body="${base64EncodedValue}" sessionId="${sessionId}" 
                                          recordId="${buildrecordId}" />
                            <echo>${line.separator} *** Zip file attached to  build record *** </echo>
                        </then>
                        <else>
                            <echo>${line.separator} *** No Zip file found for attachment  *** </echo>
                        </else>
                    </if>
		
					
                </then>
                <else>
					<echo>!!!!!!!!!!!!!!!!!!!!!!!!status : ${recordResponseStatus} </echo>
                    <!-- Parse login error message and fail build -->
                    <echo message="${line.separator} *** WARNING -Build record creation in SF failed.${line.separator} *** " level="warning"/>
                    <echo message="${line.separator}*** WARNING Response:  ${recordCreateResponse}***** ${line.separator} *** " 
                          level="warning" />
                    <echo message="${line.separator}*** WARNING Please manullay create build record with svn version in SF *** ${line.separator} " 
                          level="warning" />
                </else>
            </if>
		</sequential>
	</macrodef>
    
	<!-- this macrodef will attach zip file to build record id -->    
	<macrodef name="createAttachment">

	<attribute name="body" description="Property to store the base 64 encoded data."/>
	<attribute name="sessionId" description="Property to store the base 64 encoded data."/>
	<attribute name="recordId" description="Property to store the base 64 encoded data." />
		<sequential>
		
			<exec executable="cmd" resultproperty="SFDX.createAttachment.Result" 
					outputproperty="SFDX.createAttachment.output" failonerror="true">
				<arg line="/c " /> 
				<arg line=" sfdx force:data:record:create -s Attachment -u ${sfsb.username}"/>
				<arg line=" -v "/>
				<arg line=' "ParentId=@{recordId} Name=BackUp.zip Body=@{body}" --json '/>
			</exec>

			<echo>Create  Attachment Result : ${SFDX.createAttachment.output}</echo>

		</sequential>		
	</macrodef> 

	<!-- SFDX Authorization  -->
	<macrodef name="runJWTAuth" description="Authorizes a Salesforce org using the JWT flow">
		<sequential>
			<!-- JWTAuth.bat for windows and  JWTAuth.sh Linux 	-->
			 <exec executable="JWTAuth.bat" resultproperty="SFDX.auth.Result" 
			 		outputproperty="SFDX.auth.ResultResponse" failonerror="true"></exec>
				
			<echo>Auth Result : ${SFDX.auth.Result}</echo> 
			<echo>Auth Result Response</echo>
			<echo>${SFDX.auth.ResultResponse}</echo>
			<if>
				<equals arg1="${SFDX.auth.Result}" arg2="0"/>
				<then>
					<echo>Authorization :Success</echo>
					<echo>${line.separator} *** Conected to Salesforce *** </echo>
				</then>
				<else>
					<echo>Authorization :Fail</echo>
				</else>
			</if>	
		</sequential>
    </macrodef>

	<macrodef name="git">
        <attribute name="command" />
        <attribute name="outputproperty" default="dummy" />
        <element name="args" optional="true" />
        <sequential>
            <echo message="git @{command}" />
            <exec executable="git"   outputproperty="@{outputproperty}">
                <arg value="@{command}" />
                <args/>
            </exec>
        </sequential>
    </macrodef>

	<macrodef name="git-setup-macro">		
        <sequential>		
            <if>
            <equals arg1="${GitEndVersion}" arg2="HEAD" />
                <then>
                    <git command="pull">														
                    </git> 
                </then>
                <else>
                    <git command="pull">														
                    </git> 
                    <git command="checkout">
                        <args>
                            <arg line="${GitEndVersion}"/>
                        </args>
                    </git>
                </else>
            </if>
        </sequential>
    </macrodef>

	<target name="SFDX_Auth_Rollback"> 

		<echo message="Rollback Stage -1 : Authorize an Org from target"/>
		<runJWTAuth/>
	
		<echo message="Rollback Stage -2 : Git repository Setup"/>
        <git-setup-macro/>

		<echo message="Rollback Stage -3 :Perform PreDeployment Steps "/>

		<exec executable="cmd" 
		resultproperty="SFDX.metadata.Result" 
		outputproperty="SFDX.supportedMetadata" 
		output="OrgMetadata.json"
		failonerror="true">
			<arg line="/c sfdx force:mdapi:describemetadata --json -u ${sfsb.username}"/>
		</exec>

		<loadfile property="metaDataContents" srcFile="OrgMetadata.json" />

		<preparedeployment 
			diffLogFolder="deploy-sf/${git.ant.difflog.fld.name}"
			sfusername = "${sfsb.username}"
			sfpassword = "${sfsb.password}"
			sfloginUrl = "${sf.login.url}"
			deploymentFolderPath="deploy-sf/${git.sf.deployment.fld.name}"
			isFull="false"/>

		<echo message="Rollback Stage -4 : Perform Rollback Deployment"/>
		<if>
			<and>
				<equals arg1="${Build_Type}" arg2="Rollback"/>
				<equals arg1="${SFDX.auth.Result}" arg2="0"/>
			</and>
			<then>
				<echo message="Deploy to Org from target"/>
				<property name="is.deployed" value="true"/>
				<echo message="Rollback chnages deploy is commented"/>

				<exec executable="cmd" resultproperty="SFDX.deploy.Result" failonerror="true">
					<arg line="/c  sfdx force:mdapi:deploy -d ./destructiveChanges -u ${sfsb.username}  -g -w -1"/>
			   </exec>

				<runSFDXDeploy/>
				<!-- 
				<if>
					<equals arg1="${SFDX.deploy.Result}" arg2="0"/>
					<then>
						<echo message="Creating the zip from deploy-sf directory"/>

						<zip destfile="${sf.backup.fld.name}" basedir="deploy-sf"/>
						
						<createBuildRecord
								sessionId = "${sessionId}"
								startrev = "${start.revision}"
								endrev = "${end.revision}"
								buildrecordId = "buildrecordId"
								backupfilepath = "${sf.backup.fld.name}"
								gitlogcomment = "${gitDiffLog}"
								buildType="${Build_Type}"
								/>
					</then>
				</if> -->
			</then>
		</if>
	</target>

	<!-- SFDX Deployment -->
	<macrodef name="runSFDXDeploy" description="Deploys metadata in source format to an Salesforce org">		
		<sequential>
			<!-- <exec executable="SFDXDeploy.bat" resultproperty="SFDX.deploy.Result" failonerror="true"> 
			</exec> -->

			<exec executable="cmd" resultproperty="SFDX.deploy.Result" failonerror="true">
			 	<arg line="/c  sfdx force:source:deploy -p deploy-sf -u ${sfsb.username}  --verbose"/>
			</exec>

			<echo>Deploy Result : ${SFDX.deploy.Result}</echo>
			<if>
				<equals arg1="${SFDX.deploy.Result}" arg2="0"/>
				<then>
					<echo>Deployment :Success</echo>
				</then>
				<else>
					<echo>Deployment :Fail</echo>
				</else>
			</if>
		</sequential>
    </macrodef>

  
    <macrodef name="preparedeployment">
        <attribute name="diffLogFolder"  description="Git Diff log folder"/>
        <attribute name="deploymentFolderPath" description="Deployment folder path"/>
        <attribute name="sfusername" description="Salesforce user name."/>
        <attribute name="sfpassword" description="Salesforce password."/>
        <attribute name="sfloginUrl" description="Salesforce login URL"/>
        <attribute name="isFull"  default="false" description="Full or Incremental deployment. Default is Incremental."/> 
        <attribute name="gitlogcomment" default="Full Deployment"/>

        <sequential>
        
			<condition property="is-rollback"> 
				<equals arg1="${Build_Type}" arg2="${git.buildtype.rollback}"/>
			</condition>		

			<if>
				<equals arg1="${git.buildtype.rollback}" arg2="${Build_Type}" />
				<then>
					<!-- it is rollback -->
					<echo>${line.separator} ***  inside  a roll back - 1 = ${is-rollback} *** </echo>      
					<trycatch>
						<try>
							<runQuery
								sessionId="${sessionId}" serverUrl="${serverUrl}" queryResult="buildDetails"
								query="SELECT Id, RevisionStart__c,RevisionEnd__c FROM BuildDetails__c  order by CreatedDate DESC LIMIT 1"/>
						</try>
						<catch>
							<echo>${line.separator} *** Error querying Build_Details object ***</echo>
						</catch>
					</trycatch>
				
					<!-- Parse JSON result via JavaScript eval -->
					<script language="javascript">
						<![CDATA[ 
							var response = project.getProperty('buildDetails');
							var jsonformatted = JSON.parse(response);
							var results  = jsonformatted.result;
							if(results.records[0]){
								project.setProperty('end.revision',project.getProperty('GitEndVersion'));
								project.setProperty('start.revision', results.records[0].RevisionEnd__c);
							}
						]]>
					</script>
					<echo>${line.separator} ***  inside  a roll back - 2 = ${is-rollback} Query Run completed *** </echo>      
				</then>
			</if>

             <!-- check if the start revision set then take second last commit id -->
			<mkdir dir="@{diffLogFolder}"/>
			
			<echo> ${line.separator} *** Last revision found in Salesforce : ${start.revision} *** </echo>

			<echo> ${line.separator} *** Check for ${start.revision} and ${end.revision} ***</echo>
								
			<echo>Git Checkout for rollback</echo>

			<git command="checkout">
				<args>
					<arg line="-f"/>
				<arg line="${end.revision}"/>
				<arg line="${git.src}"/>
			</args>
			</git>

			<!-- getting diff log from git beween two version using git commandline "-->
			<echo> ${line.separator} *** Getting the git change log between ${start.revision} and ${end.revision} ***</echo>

			<!-- 1. Identify added files so that it can be removed from the org -->
			<exec executable="git" outputproperty="gitDiffLog_Added">
				<arg line=" diff"/>
				<arg line="${end.revision}"/>
				<arg line="${start.revision}"/>
				<arg line=" --diff-filter=A"/>
				<arg line=" --name-only"/>
			</exec>
			
			<mkdir dir="destructiveChanges"/>
			<get_destructive_xml fileslist="${gitDiffLog_Added}" property="deleteResult"/>
			<echo file="destructiveChanges/destructiveChanges.xml">${deleteResult}</echo>
			<getpackagexml property="packagexml"/>
			<echo file="destructiveChanges/package.xml">${packagexml}</echo>

			<!-- 2. Identify deleted files so that it can can be re-deployed to Org -->
			<exec executable="git" outputproperty="gitDiffLog_Deleted">
				<arg line=" diff"/>
				<arg line="${end.revision}"/>
				<arg line="${start.revision}"/>
				<arg line=" --diff-filter=D"/>
				<arg line=" --name-only"/>
			</exec>
			<echo>Deleted files are ${gitDiffLog_Deleted}</echo>

			<ProcessFiles file-Lists="${gitDiffLog_Deleted}" />

			<!-- 3. Identify modified files so that it can be redeploy to the org -->
			<exec executable="git" outputproperty="gitDiffLog_Modified">
				<arg line=" diff"/>
				<arg line="${end.revision}"/>
				<arg line="${start.revision}"/>
				<arg line=" --diff-filter=M"/>
				<arg line=" --name-only"/>
			</exec>
			<echo>Modified files are ${gitDiffLog_Modified}</echo>

			<ProcessFiles file-Lists="${gitDiffLog_Modified}" />
			
        </sequential>

    </macrodef>

	<macrodef name="ProcessFiles" description="Move the new / modified files into SF-deploy folder">
    <attribute name="file-Lists" description="File List collection"/>
		<sequential>
			<for list="@{file-Lists}" param="currentFile" delimiter="${line.separator}">
				<sequential>
					<if>
						<contains string="@{currentFile}" subString="force-app"/>
						<then>
							<!-- Get the file / component parent folder path -->
							<propertyregex property="currentComponentFolder" input="@{currentFile}"
								regexp="(.*\/).*" select="\1" casesensitive="true" 
								override="true" defaultValue=""/>

								<!-- Find the aura keywoerd  component folder path -->
								<propertyregex property="currentComponentlwc" input="${currentComponentFolder}"
								regexp="force-app\/main\/default\/lwc\/" select="\0"
								casesensitive="true" override="true" defaultValue=""/>

								<!-- Find the aura keywoerd  component folder path -->
								<propertyregex property="currentComponentaura" input="${currentComponentFolder}"
								regexp="force-app\/main\/default\/aura\/" select="\0"
								casesensitive="true" override="true" defaultValue=""/>

							<echo>File to Copy  @{currentFile}</echo>
							<echo>Component Folder to Copy  ${currentComponentFolder}</echo>

						
								<propertyregex
											property="deploySubFolder"
											input="@{currentComponentFolder}"
											regexp="force-app\/main\/default\/([a-zA-Z$]*\/[a-zA-Z0-9\/\ \_-]*).*"
											select='\1'
											casesensitive="true" 
											override="true"
											defaultValue=""/>
									<echo> deploySubFolder path: ${deploySubFolder} </echo>

							<echo>value of  {currentComponentaura} =  ${currentComponentaura}</echo>
							<echo>value of  {currentComponentlwc} =  ${currentComponentlwc}</echo>

							<!--- Check current component is LWC or AURA -->
							<if>
								<or>
									<contains string="${currentComponentaura}" subString="aura"/>
									<contains string="${currentComponentlwc}" subString="lwc"/>
								</or>
								<then>
									<if>
										<contains string="${currentComponentaura}" subString="aura"/>
										<then>
										<propertyregex property="auraFolderPath" input="${currentComponentFolder}"
											regexp="force-app\/main\/default\/aura\/" replace=""
									casesensitive="true" override="true" defaultValue=""/>
												<echo>Aura component folder name -1 is @{auraFolderPath}</echo>
												<echo>Aura component folder name -2 is ${auraFolderPath}</echo>

												<if>
													<available file="deploy-sf/aura/${auraFolderPath}" type="dir" />
												<then>
													<echo message="Directory exists" />
												</then>
												<else>
													<echo message="Directory does not exist" />
													<mkdir dir="deploy-sf/aura/${auraFolderPath}"/>
												</else>
												</if>
											
											<copy todir="deploy-sf/aura/${auraFolderPath}" verbose="true">
												<fileset dir="${currentComponentFolder}">
													<include name="*.*"/>
												</fileset>
											</copy> 
										</then>
									</if>
									<if>
										<contains string="${currentComponentlwc}" subString="lwc"/>
										<then>
											<propertyregex property="lwcFolderPath" input="${currentComponentFolder}"
											regexp="force-app\/main\/default\/lwc\/" replace=""
									casesensitive="true" override="true" defaultValue=""/>
												<echo>LWC component folder name -1 is @{lwcFolderPath}</echo>
												<echo>LWC component folder name -2 is ${lwcFolderPath}</echo>

												<if>
													<available file="deploy-sf/lwc/${lwcFolderPath}" type="dir" />
												<then>
													<echo message="Directory exists" />
												</then>
												<else>
													<echo message="Directory does not exist" />
													<mkdir dir="deploy-sf/lwc/${lwcFolderPath}"/>
												</else>
												</if>
											
											<copy todir="deploy-sf/lwc/${lwcFolderPath}" verbose="true">
												<fileset dir="${currentComponentFolder}">
													<include name="*.*"/>
												</fileset>
											</copy> 
										</then>
									</if>
									
								</then>
								<else>
									<echo>NON LWC / AURA component path to Copy  ${currentComponentFolder}</echo>
									<!--<basename property="filename" file="@{currentFile}"/> -->

									<propertyregex property="otherFolderPath" input="${currentComponentFolder}"
											regexp="force-app\/main\/default\/" replace=""
									casesensitive="true" override="true" defaultValue=""/>

									<echo>Other component's folder name is: ${otherFolderPath}</echo>

									<propertyregex property="mainfolderPath" input="@{currentFile}"
											regexp="force-app\/main\/default\/" replace=""
									casesensitive="true" override="true" defaultValue=""/>

									<propertyregex property="filename" input="${mainfolderPath}"
											regexp="${otherFolderPath}" replace=""
									casesensitive="true" override="true" defaultValue=""/>

									<echo>FileName-2 is ${filename}</echo>

										<if>
											<available file="deploy-sf/${otherFolderPath}" type="dir" />
											<then>
												<echo message="Directory exists" />
											</then>
											<else>
												<echo message="Directory does not exist" />
												<mkdir dir="deploy-sf/${otherFolderPath}"/>
											</else>
										</if>

										<copy todir="deploy-sf/${otherFolderPath}" verbose="true">
											<fileset dir="${currentComponentFolder}">
												<include name="${filename}"/>
											</fileset>
										</copy>

										<copy todir="deploy-sf/${otherFolderPath}" verbose="true">
											<fileset dir="${currentComponentFolder}">
												<include name="${filename}-meta.xml"/>
											</fileset>
										</copy>
								</else>
							</if>	
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	   <!-- Provides access to the Salesforce REST API for a SOQL query -->
    
    <macrodef name="runQuery" description="Run database query">
		<attribute name="sessionId" description="Salesforce sessionId."/>
		<attribute name="serverUrl" description="Salesforce url."/>
		<attribute name="query" description="Salesforce soql query."/>
		<attribute name="queryResult" description="Query result property name"/>
		<sequential>
         
		<exec executable="cmd" resultproperty="queryResponseStatus" outputproperty="queryResponse" failonerror="true">
			<arg line="/c"/>
			<arg line=" sfdx force:data:soql:query -q '@{query}' -u ${sfsb.username}  --json"/>
		</exec>

		   <echo>queryResponseStatus is </echo>
		   <echo>${queryResponseStatus}</echo>
		   <echo>-----------------------------------</echo>
		   <echo>${queryResponse}</echo>
		   <echo>-----------------------------------</echo>

			<if>
				<equals arg1="${queryResponseStatus}" arg2="0"/>
				<then>
					<property name="@{queryResult}" value="${queryResponse}"/>
				</then>
				<else>
					<echo>${line.separator} *** ${queryResultResponse} ***${line.separator}</echo>
					<fail message="${queryResultResponse}" />
				</else>
			</if>
        </sequential>
    </macrodef>

	 <scriptdef name="get_destructive_xml" language="javascript">
		<attribute name="fileslist" />
		
		<attribute name="property" />
		<![CDATA[

		var metaMap = {
			'applications': 'CustomApplication',
			'appMenus': 'AppMenu',
			'approvalProcesses': 'ApprovalProcess',
			'assignmentRules': 'AssignmentRules',
			'aura': 'AuraDefinitionBundle',
			'authproviders': 'AuthProvider',
			'autoResponseRules': 'AutoResponseRules',
			'classes': 'ApexClass',
			'communities': 'Community',
			'components': 'ApexComponent',
			'connectedApps': 'ConnectedApp',
			'customPermissions': 'CustomPermission',
			'customMetadata': 'CustomMetadata',
			'dashboards': 'Dashboard',
			'documents': 'Document',
			'email': 'EmailTemplate',
			'escalationRules': 'EscalationRules',
			'flowDefinitions': 'FlowDefinition',
			'flows': 'Flow',
			'groups': 'Group',
			'homePageComponents': 'HomePageComponent',
			'homePageLayouts': 'HomePageLayout',
			'installedPackages': 'InstalledPackage',
			'labels': 'CustomLabels',
			'layouts': 'Layout',
			'letterhead': 'Letterhead',
			'managedTopics': 'ManagedTopics',
			'matchingRules': 'MatchingRule',
			'namedCredentials': 'NamedCredential',
			'networks': 'Network',
			'objects': 'CustomObject',
			'objectTranslations': 'CustomObjectTranslation',
			'pages': 'ApexPage',
			'permissionsets': 'PermissionSet',
			'profiles': 'Profile',
			'queues': 'Queue',
			'quickActions': 'QuickAction',
			'remoteSiteSettings': 'RemoteSiteSetting',
			'reports': 'Report',
			'reportTypes': 'ReportType',
			'roles': 'Role',
			'staticresources': 'StaticResource',
			'triggers': 'ApexTrigger',
			'tabs': 'CustomTab',
			'sharingRules': 'SharingRules',
			'sharingSets': 'SharingSet',
			'siteDotComSites': 'SiteDotCom',
			'sites': 'CustomSite',
			'workflows': 'Workflow',
			'weblinks': 'CustomPageWebLink',
			'lwc':'LightningComponentBundle'
		};
			
			var echo = project.createTask("echo");

			var fileListForCopy = [];

			//defines the different member types
			var metaBag = {};
			var metaBagDestructive = {};
			var deletesHaveOccurred = false;
	
			var fileList = attributes.get("fileslist");
			var splitedFileList = fileList.split("\r\n");
			for(var i=0; i<splitedFileList.length; i++)
			{
				var fileName = splitedFileList[i];
				fileName = fileName.replace('force-app/main/default','src');	
				var parts = fileName.split('/');
				
				// Check for invalid fileName, likely due to data stream exceeding buffer size resulting in incomplete string
				// TODO: need a way to ensure that full fileNames are processed - increase buffer size??
				if (parts[2] === undefined) {
					echo.setMessage("File name: " + fileName + " cannot be processed, exiting");
					echo.perform( );
				}

				var meta='';

				if (parts.length === 4) {
					// Processing metadata with nested folders e.g. emails, documents, reports
					echo.setMessage("Processing metadata with nested folders e.g. emails, documents, reports");
					echo.perform( );

					if (parts[1]=="lwc" || parts[2]=="aura"){
						meta = parts[2];
					}
					else{
						meta = parts[2] + '/' + parts[3].split('.')[0];

					}
				} else {
					// Processing metadata without nested folders. Strip -meta from the end.
					echo.setMessage("Processing metadata without nested folders. Strip -meta from the end.");
					echo.perform( );

					meta = parts[2].split('.')[0].replace('-meta', '');
				}

				// file was deleted
				echo.setMessage("File was deleted:" +fileName);
				echo.perform( );

				deletesHaveOccurred = true;

				if (!metaBagDestructive.hasOwnProperty(parts[1])) {
					metaBagDestructive[parts[1]] = [];
				}

				if (metaBagDestructive[parts[1]].indexOf(meta) === -1) {
					metaBagDestructive[parts[1]].push(meta);
				}
			}

			// build destructiveChanges file content

			var apiVersion = apiVersion || '37.0';
			var xmlstring = '<?xml version="1.0" encoding="UTF-8"?>';
			xmlstring = xmlstring + '<Package xmlns="http://soap.sforce.com/2006/04/metadata">';
			for (var type in metaBagDestructive) {
		
				if (metaBagDestructive.hasOwnProperty(type)) {

					xmlstring = xmlstring + '<types>';
						for (var item in metaBagDestructive[type]) {
							xmlstring = xmlstring + '<members>'+ metaBagDestructive[type]  + '</members>';
					};

					xmlstring = xmlstring + '<name>'+ metaMap[type] + '</name>' ;
					xmlstring = xmlstring + '</types>';
				}
			}
			xmlstring = xmlstring + '</Package>';
			//xml.ele('version', apiVersion);
			echo.setMessage("XML output is ");
			echo.perform( );
			echo.setMessage(xmlstring);
			echo.perform( );

			project.setProperty(attributes.get("property"),xmlstring);
		]]>
	</scriptdef>

	<scriptdef name="getpackagexml" language="javascript">
	<attribute name="property" />
		<![CDATA[
			var packageXMLString='<?xml version="1.0" encoding="UTF-8"?>';
			packageXMLString= packageXMLString +'<Package xmlns="http://soap.sforce.com/2006/04/metadata">';
			packageXMLString= packageXMLString +'<version>52.0</version>';
			packageXMLString= packageXMLString +'</Package>';

			project.setProperty(attributes.get("property"), packageXMLString);
		]]>
	</scriptdef>
</project>